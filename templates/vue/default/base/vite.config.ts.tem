import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import path from 'path'
<% if(plugins.pages){ %>  
import pages from 'vite-plugin-pages'
import layouts from 'vite-plugin-vue-layouts'
<% } %> 
<% if(features.unocss){ %>import unocss from 'unocss'<% } %>  
<% if(plugins.autoAPIs){ %>import autoAPIs from 'unplugin-auto-import/vite'<% } %> 
<% if(plugins.autoComponents){ %>import autoComponents from 'unplugin-vue-components/vite'<% } %> 
<% if(features.i18n){ %>import i18n from '@intlify/vite-plugin-vue-i18n'<% } %> 
<% if(plugins.markdown){ %> 
import markdown from 'vite-plugin-vue-markdown'
import linkattributes from 'markdown-it-link-attributes'
import shiki from 'markdown-it-shiki'
<% } %> 
<% if(pwa){ %>import { VitePWA as pwa } from 'vite-plugin-pwa'<% } %> 

function resolve(dir: string) {
  return path.join(__dirname, dir)
}

// https://vitejs.dev/config/
export default defineConfig({
  base: './',
  resolve: {
    alias: {
      '@': resolve('src'),
      'src': resolve('src'),
      'components': resolve('src/components'),
      'layouts': resolve('src/layouts'),
      'pages': resolve('src/pages'),
      'router': resolve('src/router'),
      'stores': resolve('src/stores'),
    },
  },
  plugins: [
    vue(<% if(features.ref){ %>{ reactivityTransform: true }<% } %>),
    <% if(features.unocss){ %>unocss(),<% } %>
    <% if(plugins.pages){ %>  
    pages({
      extensions: ['vue', 'md'],
      extendRoute(route) {
        if (route.path === '/') {
        // Index is unauthenticated.
          return route
        }
        // Augment the route with meta that indicates that the route requires authentication.
        return {
          ...route,
          meta: { auth: true },
        }
      },
    }),
    layouts({ defaultLayout: 'MainLayout' }),
    <% } %> 
    <% if(plugins.autoComponents){ %>  
    autoComponents({ dts: 'src/components.d.ts' }),
    <% } %> 
    <% if(plugins.autoAPIs){ %> 
    autoAPIs({
      imports: [
        'vue',
        'pinia',
        'vue-router',
        <% if(features.i18n){ %>'vue-i18n'<% } %>
      ],
      dts: 'src/auto-imports.d.ts',
    }),
    <% } %> 
    <% if(features.i18n){ %>i18n({ include: path.resolve(__dirname, './src/i18n/messages/**') }),<% } %> 
    <% if(plugins.markdown){ %> 
    markdown({
      markdownItSetup(md) {
        // https://prismjs.com/
        md.use(shiki, {
          theme: {
            light: 'light-plus',
            dark: 'dark-plus',
          },
        })
        md.use(linkattributes, {
          matcher: (link: string) => /^https?:\/\//.test(link),
          attrs: {
            target: '_blank',
            rel: 'noopener',
          },
        })
      },
    }),
    <% } %>  
    <% if(pwa){ %> 
    pwa({
      registerType: 'autoUpdate',
      includeAssets: ['icons/safari-pinned-tab.svg'],
      manifest: {
        name: '<%= projectName %>',
        short_name: '<%= projectName %>',
        theme_color: '#ffffff',
        icons: [
          {
            src: 'icons/android-chrome-192x192.png',
            sizes: '192x192',
            type: 'image/png',
          },
          {
            src: 'icons/apple-touch-icon.png',
            sizes: '180x180',
            type: 'image/png',
          },
          {
            src: 'icons/android-chrome-512x512.png',
            sizes: '512x512',
            type: 'image/png',
          },
        ],
      },
    })
    <% } %> 
  ],
  build: {
    rollupOptions: {
      output: {
        chunkFileNames: 'js/[name]-[hash].js',
        entryFileNames: 'js/[name]-[hash].js',
        assetFileNames: '[ext]/[name]-[hash].[ext]',
      },
    },
  },
})